name: '_build-and-tests'
on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0 # TODO: remove this when we cache the builds

jobs:
  tests:
    name: build and tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4

      - name: setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
          profile: minimal

      - name: setup Rust
        run: |
          cargo install cargo-aur
          cargo install cargo-generate-rpm          

      - name: build
        run: |
          cargo build --all-targets --all-features
          cargo build --release --all-targets --all-features

      - name: fmt check
        run: cargo fmt --all -- --check

      - name: check
        run: cargo check --all

      - name: clippy
        run: |
          cargo clippy --all-targets --release -- \
            -A clippy::similar_names \
            -A clippy::too_many_arguments \
            -A clippy::significant_drop_tightening \
            -A clippy::redundant_closure \
            -A clippy::missing_errors_doc \
            -A clippy::type_complexity
        shell: bash

      - name: doc
        run: cargo doc --workspace --all-features --no-deps

      - name: tests
        if: matrix.os != 'windows-latest'
        run: cargo test --release --all --all-features

      - name: test publish
        run: |
          # Filepath to the Cargo.toml file
          CARGO_FILE="Cargo.toml"
          BACKUP_FILE="Cargo_backup.txt"
          
          # Function to add -dryRun to the version
          add_dryrun_to_version() {
          if [[ -f $CARGO_FILE ]]; then
          # Backup the original Cargo.toml before modification
          cp "$CARGO_FILE" "$BACKUP_FILE"
          
          # Extract the current version from the file
          ORIGINAL_VERSION=$(grep -oP '^version\s*=\s*"\K[^\"]+' "$CARGO_FILE")
          
          if [[ -n $ORIGINAL_VERSION ]]; then
          # Modify the version and write it back to the Cargo.toml file
          sed -i "s/version = \"$ORIGINAL_VERSION\"/version = \"$ORIGINAL_VERSION-dryRun\"/" "$CARGO_FILE"
          echo "Version modified to: $ORIGINAL_VERSION-dryRun"
            else
            echo "No version found in the file."
            fi
            else
            echo "Cargo.toml file not found!"
            fi
          }
          
          # Function to revert the version to its original state by restoring from backup
          revert_version() {
            if [[ -f $BACKUP_FILE ]]; then
            # Restore the original Cargo.toml from the backup
            mv "$BACKUP_FILE" "$CARGO_FILE"
            echo "Cargo.toml reverted to the original version."
            else
            echo "Backup file not found! Cannot revert."
            fi
          }
          
          add_dryrun_to_version
          cargo publish --dry-run --allow-dirty --allow-staged
          revert_version

      - name: test package
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo aur
          cargo generate-rpm

      - name: java-bridge build
        run: |
          cd java-bridge
          cargo build --all-targets --all-features
          cargo build --release --all-targets --all-features

      - name: java-bridge fmt check
        run: |
          cd java-bridge
          cargo fmt --all -- --check

      - name: java-bridge check
        run: |
          cd java-bridge
          cargo check --all

      - name: java-bridge clippy
        run: |
          cargo clippy --all-targets --release -- \
            -A clippy::similar_names \
            -A clippy::too_many_arguments \
            -A clippy::significant_drop_tightening \
            -A clippy::redundant_closure \
            -A clippy::missing_errors_doc \
            -A clippy::type_complexity
        shell: bash

      - name: java-bridge doc
        run: cargo doc --workspace --all-features --no-deps

      - name: java-bridge tests
        if: matrix.os != 'windows-latest'
        run: |
          cd java-bridge
          cargo test --release --all --all-features
